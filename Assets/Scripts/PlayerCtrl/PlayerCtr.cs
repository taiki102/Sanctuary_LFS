//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Scripts/PlayerCtrl/PlayerCtr.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerCtr: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerCtr()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerCtr"",
    ""maps"": [
        {
            ""name"": ""Xbox"",
            ""id"": ""cb78fedf-88a0-4d13-b4ec-bdd2e442c3fc"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""8b53e5eb-7607-4fb5-8c8d-66d679c621d2"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Value"",
                    ""id"": ""6e06cbdd-368a-4433-a91f-33d8b1d01e5b"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""7a7d53b8-6187-4a5d-8767-7798963a26b8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack_normal"",
                    ""type"": ""Button"",
                    ""id"": ""0d117a7e-a03d-44bb-9800-e147f12b1140"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LB"",
                    ""type"": ""Button"",
                    ""id"": ""4cd5d7b6-d143-4ec3-a002-66be0f4824b3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RB"",
                    ""type"": ""Button"",
                    ""id"": ""959d2e81-1ca1-4386-b92f-c41022913e4b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LT"",
                    ""type"": ""Button"",
                    ""id"": ""b3903af3-6a65-44f8-a17c-9cfe57cea7a4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RT"",
                    ""type"": ""Button"",
                    ""id"": ""e31d96ce-af63-4be1-8b1d-96e673780526"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""eeede984-b46e-4da5-b2de-323d9c221ccf"",
                    ""path"": ""<XInputController>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6cd860ba-21e5-40ed-a0eb-3e720900964f"",
                    ""path"": ""<XInputController>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5df07364-a2a3-4d8c-aa41-921fb7dee3e8"",
                    ""path"": ""<XInputController>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""78d86e15-c141-4032-84e5-531ea800aaab"",
                    ""path"": ""<XInputController>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack_normal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d65bee84-176c-4e33-851e-551d92fa7642"",
                    ""path"": ""<XInputController>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LB"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f8403277-c273-4cd9-a285-22a0c28765e2"",
                    ""path"": ""<XInputController>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RB"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""473963a9-699d-4aa0-a258-94c02a393732"",
                    ""path"": ""<XInputController>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LT"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c8fa7efb-b619-4cd8-ab3d-a63c4a192add"",
                    ""path"": ""<XInputController>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RT"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PS4"",
            ""id"": ""5c36c3b7-280b-40dc-a1e1-ac79208663e4"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""b0dddadc-b1ec-4f17-89cd-dc9f45192794"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Value"",
                    ""id"": ""78a11059-f874-4682-8f6e-65dc2a89adce"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""30ffe81f-4c92-4514-ac03-407ab75d1cf0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack_normal"",
                    ""type"": ""Button"",
                    ""id"": ""8209bd86-7d5d-4387-a6ac-c70eccd01d0b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""aacdfa29-0c00-4cd2-93d7-b3ea6605e5f7"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""df6fa8bc-42ac-4247-9289-c780851b467a"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""69f3fbf4-46cc-4fcb-a06d-b099dbd9b41b"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""76b93441-b91a-445f-b2c1-01cb1e697b27"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack_normal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""GamePad"",
            ""id"": ""2afffd32-592c-4ae7-bf02-29a403f843ab"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""f7985d57-9b41-4d0b-9d3d-117e1255b41f"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Value"",
                    ""id"": ""b30dff13-ef64-48b4-8a2b-f0cbe40e5535"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""8255aba8-12b2-4a86-a076-8109645f0f35"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack_normal"",
                    ""type"": ""Button"",
                    ""id"": ""d3c55a7b-2a42-48ef-8146-e7cca8827983"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LB"",
                    ""type"": ""Button"",
                    ""id"": ""d26b68c9-3c1b-49fa-bc0b-8978e16d4d2a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RB"",
                    ""type"": ""Button"",
                    ""id"": ""c5b7950d-7ea1-4f68-827e-e1b39b6e7950"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LT"",
                    ""type"": ""Button"",
                    ""id"": ""6e6b3f40-2dcd-4f47-a693-b3f59ff86f4f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RT"",
                    ""type"": ""Button"",
                    ""id"": ""eaba5a46-c7bd-47b7-bd5d-b92c8921887d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Restart"",
                    ""type"": ""Button"",
                    ""id"": ""0a5db7b4-92b1-417a-a7e2-62228998a13c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d5c55c39-5d2a-4a3a-aa72-dbd009fe2a49"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""91c6213b-4453-4a58-af41-e2b20f83d230"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""95285258-1287-4e1c-b392-811f9a21c0ac"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""145e30cf-d653-493e-92dd-5f46a70e224d"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack_normal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8e23e824-ceab-402a-92b0-8df90a31c6e8"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LB"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f87114ee-21a5-42bd-9464-5ecc11be3def"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RB"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dbab3c53-68c2-4ea6-958e-0b0a49074cb4"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LT"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fd1d400a-2048-46ac-b395-07a8e45b502f"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RT"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c1badc2f-d71f-4c61-90cb-a770af52eee5"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Restart"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""xbox"",
            ""bindingGroup"": ""xbox"",
            ""devices"": [
                {
                    ""devicePath"": ""<XInputController>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Xbox
        m_Xbox = asset.FindActionMap("Xbox", throwIfNotFound: true);
        m_Xbox_Move = m_Xbox.FindAction("Move", throwIfNotFound: true);
        m_Xbox_Rotate = m_Xbox.FindAction("Rotate", throwIfNotFound: true);
        m_Xbox_Jump = m_Xbox.FindAction("Jump", throwIfNotFound: true);
        m_Xbox_Attack_normal = m_Xbox.FindAction("Attack_normal", throwIfNotFound: true);
        m_Xbox_LB = m_Xbox.FindAction("LB", throwIfNotFound: true);
        m_Xbox_RB = m_Xbox.FindAction("RB", throwIfNotFound: true);
        m_Xbox_LT = m_Xbox.FindAction("LT", throwIfNotFound: true);
        m_Xbox_RT = m_Xbox.FindAction("RT", throwIfNotFound: true);
        // PS4
        m_PS4 = asset.FindActionMap("PS4", throwIfNotFound: true);
        m_PS4_Move = m_PS4.FindAction("Move", throwIfNotFound: true);
        m_PS4_Rotate = m_PS4.FindAction("Rotate", throwIfNotFound: true);
        m_PS4_Jump = m_PS4.FindAction("Jump", throwIfNotFound: true);
        m_PS4_Attack_normal = m_PS4.FindAction("Attack_normal", throwIfNotFound: true);
        // GamePad
        m_GamePad = asset.FindActionMap("GamePad", throwIfNotFound: true);
        m_GamePad_Move = m_GamePad.FindAction("Move", throwIfNotFound: true);
        m_GamePad_Rotate = m_GamePad.FindAction("Rotate", throwIfNotFound: true);
        m_GamePad_Jump = m_GamePad.FindAction("Jump", throwIfNotFound: true);
        m_GamePad_Attack_normal = m_GamePad.FindAction("Attack_normal", throwIfNotFound: true);
        m_GamePad_LB = m_GamePad.FindAction("LB", throwIfNotFound: true);
        m_GamePad_RB = m_GamePad.FindAction("RB", throwIfNotFound: true);
        m_GamePad_LT = m_GamePad.FindAction("LT", throwIfNotFound: true);
        m_GamePad_RT = m_GamePad.FindAction("RT", throwIfNotFound: true);
        m_GamePad_Restart = m_GamePad.FindAction("Restart", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Xbox
    private readonly InputActionMap m_Xbox;
    private List<IXboxActions> m_XboxActionsCallbackInterfaces = new List<IXboxActions>();
    private readonly InputAction m_Xbox_Move;
    private readonly InputAction m_Xbox_Rotate;
    private readonly InputAction m_Xbox_Jump;
    private readonly InputAction m_Xbox_Attack_normal;
    private readonly InputAction m_Xbox_LB;
    private readonly InputAction m_Xbox_RB;
    private readonly InputAction m_Xbox_LT;
    private readonly InputAction m_Xbox_RT;
    public struct XboxActions
    {
        private @PlayerCtr m_Wrapper;
        public XboxActions(@PlayerCtr wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Xbox_Move;
        public InputAction @Rotate => m_Wrapper.m_Xbox_Rotate;
        public InputAction @Jump => m_Wrapper.m_Xbox_Jump;
        public InputAction @Attack_normal => m_Wrapper.m_Xbox_Attack_normal;
        public InputAction @LB => m_Wrapper.m_Xbox_LB;
        public InputAction @RB => m_Wrapper.m_Xbox_RB;
        public InputAction @LT => m_Wrapper.m_Xbox_LT;
        public InputAction @RT => m_Wrapper.m_Xbox_RT;
        public InputActionMap Get() { return m_Wrapper.m_Xbox; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(XboxActions set) { return set.Get(); }
        public void AddCallbacks(IXboxActions instance)
        {
            if (instance == null || m_Wrapper.m_XboxActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_XboxActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Rotate.started += instance.OnRotate;
            @Rotate.performed += instance.OnRotate;
            @Rotate.canceled += instance.OnRotate;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Attack_normal.started += instance.OnAttack_normal;
            @Attack_normal.performed += instance.OnAttack_normal;
            @Attack_normal.canceled += instance.OnAttack_normal;
            @LB.started += instance.OnLB;
            @LB.performed += instance.OnLB;
            @LB.canceled += instance.OnLB;
            @RB.started += instance.OnRB;
            @RB.performed += instance.OnRB;
            @RB.canceled += instance.OnRB;
            @LT.started += instance.OnLT;
            @LT.performed += instance.OnLT;
            @LT.canceled += instance.OnLT;
            @RT.started += instance.OnRT;
            @RT.performed += instance.OnRT;
            @RT.canceled += instance.OnRT;
        }

        private void UnregisterCallbacks(IXboxActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Rotate.started -= instance.OnRotate;
            @Rotate.performed -= instance.OnRotate;
            @Rotate.canceled -= instance.OnRotate;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Attack_normal.started -= instance.OnAttack_normal;
            @Attack_normal.performed -= instance.OnAttack_normal;
            @Attack_normal.canceled -= instance.OnAttack_normal;
            @LB.started -= instance.OnLB;
            @LB.performed -= instance.OnLB;
            @LB.canceled -= instance.OnLB;
            @RB.started -= instance.OnRB;
            @RB.performed -= instance.OnRB;
            @RB.canceled -= instance.OnRB;
            @LT.started -= instance.OnLT;
            @LT.performed -= instance.OnLT;
            @LT.canceled -= instance.OnLT;
            @RT.started -= instance.OnRT;
            @RT.performed -= instance.OnRT;
            @RT.canceled -= instance.OnRT;
        }

        public void RemoveCallbacks(IXboxActions instance)
        {
            if (m_Wrapper.m_XboxActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IXboxActions instance)
        {
            foreach (var item in m_Wrapper.m_XboxActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_XboxActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public XboxActions @Xbox => new XboxActions(this);

    // PS4
    private readonly InputActionMap m_PS4;
    private List<IPS4Actions> m_PS4ActionsCallbackInterfaces = new List<IPS4Actions>();
    private readonly InputAction m_PS4_Move;
    private readonly InputAction m_PS4_Rotate;
    private readonly InputAction m_PS4_Jump;
    private readonly InputAction m_PS4_Attack_normal;
    public struct PS4Actions
    {
        private @PlayerCtr m_Wrapper;
        public PS4Actions(@PlayerCtr wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_PS4_Move;
        public InputAction @Rotate => m_Wrapper.m_PS4_Rotate;
        public InputAction @Jump => m_Wrapper.m_PS4_Jump;
        public InputAction @Attack_normal => m_Wrapper.m_PS4_Attack_normal;
        public InputActionMap Get() { return m_Wrapper.m_PS4; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PS4Actions set) { return set.Get(); }
        public void AddCallbacks(IPS4Actions instance)
        {
            if (instance == null || m_Wrapper.m_PS4ActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PS4ActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Rotate.started += instance.OnRotate;
            @Rotate.performed += instance.OnRotate;
            @Rotate.canceled += instance.OnRotate;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Attack_normal.started += instance.OnAttack_normal;
            @Attack_normal.performed += instance.OnAttack_normal;
            @Attack_normal.canceled += instance.OnAttack_normal;
        }

        private void UnregisterCallbacks(IPS4Actions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Rotate.started -= instance.OnRotate;
            @Rotate.performed -= instance.OnRotate;
            @Rotate.canceled -= instance.OnRotate;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Attack_normal.started -= instance.OnAttack_normal;
            @Attack_normal.performed -= instance.OnAttack_normal;
            @Attack_normal.canceled -= instance.OnAttack_normal;
        }

        public void RemoveCallbacks(IPS4Actions instance)
        {
            if (m_Wrapper.m_PS4ActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPS4Actions instance)
        {
            foreach (var item in m_Wrapper.m_PS4ActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PS4ActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PS4Actions @PS4 => new PS4Actions(this);

    // GamePad
    private readonly InputActionMap m_GamePad;
    private List<IGamePadActions> m_GamePadActionsCallbackInterfaces = new List<IGamePadActions>();
    private readonly InputAction m_GamePad_Move;
    private readonly InputAction m_GamePad_Rotate;
    private readonly InputAction m_GamePad_Jump;
    private readonly InputAction m_GamePad_Attack_normal;
    private readonly InputAction m_GamePad_LB;
    private readonly InputAction m_GamePad_RB;
    private readonly InputAction m_GamePad_LT;
    private readonly InputAction m_GamePad_RT;
    private readonly InputAction m_GamePad_Restart;
    public struct GamePadActions
    {
        private @PlayerCtr m_Wrapper;
        public GamePadActions(@PlayerCtr wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_GamePad_Move;
        public InputAction @Rotate => m_Wrapper.m_GamePad_Rotate;
        public InputAction @Jump => m_Wrapper.m_GamePad_Jump;
        public InputAction @Attack_normal => m_Wrapper.m_GamePad_Attack_normal;
        public InputAction @LB => m_Wrapper.m_GamePad_LB;
        public InputAction @RB => m_Wrapper.m_GamePad_RB;
        public InputAction @LT => m_Wrapper.m_GamePad_LT;
        public InputAction @RT => m_Wrapper.m_GamePad_RT;
        public InputAction @Restart => m_Wrapper.m_GamePad_Restart;
        public InputActionMap Get() { return m_Wrapper.m_GamePad; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GamePadActions set) { return set.Get(); }
        public void AddCallbacks(IGamePadActions instance)
        {
            if (instance == null || m_Wrapper.m_GamePadActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GamePadActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Rotate.started += instance.OnRotate;
            @Rotate.performed += instance.OnRotate;
            @Rotate.canceled += instance.OnRotate;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Attack_normal.started += instance.OnAttack_normal;
            @Attack_normal.performed += instance.OnAttack_normal;
            @Attack_normal.canceled += instance.OnAttack_normal;
            @LB.started += instance.OnLB;
            @LB.performed += instance.OnLB;
            @LB.canceled += instance.OnLB;
            @RB.started += instance.OnRB;
            @RB.performed += instance.OnRB;
            @RB.canceled += instance.OnRB;
            @LT.started += instance.OnLT;
            @LT.performed += instance.OnLT;
            @LT.canceled += instance.OnLT;
            @RT.started += instance.OnRT;
            @RT.performed += instance.OnRT;
            @RT.canceled += instance.OnRT;
            @Restart.started += instance.OnRestart;
            @Restart.performed += instance.OnRestart;
            @Restart.canceled += instance.OnRestart;
        }

        private void UnregisterCallbacks(IGamePadActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Rotate.started -= instance.OnRotate;
            @Rotate.performed -= instance.OnRotate;
            @Rotate.canceled -= instance.OnRotate;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Attack_normal.started -= instance.OnAttack_normal;
            @Attack_normal.performed -= instance.OnAttack_normal;
            @Attack_normal.canceled -= instance.OnAttack_normal;
            @LB.started -= instance.OnLB;
            @LB.performed -= instance.OnLB;
            @LB.canceled -= instance.OnLB;
            @RB.started -= instance.OnRB;
            @RB.performed -= instance.OnRB;
            @RB.canceled -= instance.OnRB;
            @LT.started -= instance.OnLT;
            @LT.performed -= instance.OnLT;
            @LT.canceled -= instance.OnLT;
            @RT.started -= instance.OnRT;
            @RT.performed -= instance.OnRT;
            @RT.canceled -= instance.OnRT;
            @Restart.started -= instance.OnRestart;
            @Restart.performed -= instance.OnRestart;
            @Restart.canceled -= instance.OnRestart;
        }

        public void RemoveCallbacks(IGamePadActions instance)
        {
            if (m_Wrapper.m_GamePadActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGamePadActions instance)
        {
            foreach (var item in m_Wrapper.m_GamePadActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GamePadActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GamePadActions @GamePad => new GamePadActions(this);
    private int m_xboxSchemeIndex = -1;
    public InputControlScheme xboxScheme
    {
        get
        {
            if (m_xboxSchemeIndex == -1) m_xboxSchemeIndex = asset.FindControlSchemeIndex("xbox");
            return asset.controlSchemes[m_xboxSchemeIndex];
        }
    }
    public interface IXboxActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnRotate(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnAttack_normal(InputAction.CallbackContext context);
        void OnLB(InputAction.CallbackContext context);
        void OnRB(InputAction.CallbackContext context);
        void OnLT(InputAction.CallbackContext context);
        void OnRT(InputAction.CallbackContext context);
    }
    public interface IPS4Actions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnRotate(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnAttack_normal(InputAction.CallbackContext context);
    }
    public interface IGamePadActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnRotate(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnAttack_normal(InputAction.CallbackContext context);
        void OnLB(InputAction.CallbackContext context);
        void OnRB(InputAction.CallbackContext context);
        void OnLT(InputAction.CallbackContext context);
        void OnRT(InputAction.CallbackContext context);
        void OnRestart(InputAction.CallbackContext context);
    }
}
